/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAssetApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Asset details
        /// </summary>
        /// <remarks>
        /// Returns information about one specific Asset.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <returns>AssetInfo</returns>
        AssetInfo AssetDetails (string ticker);

        /// <summary>
        /// Asset details
        /// </summary>
        /// <remarks>
        /// Returns information about one specific Asset.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <returns>ApiResponse of AssetInfo</returns>
        ApiResponse<AssetInfo> AssetDetailsWithHttpInfo (string ticker);
        /// <summary>
        /// Historical information
        /// </summary>
        /// <remarks>
        /// The price history returns data points for the given period. Different granulation of data can be returned based on the length of the period provided from daily to 5 minute (one  price point per period).  From and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned with hourly granulation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="granulation"> (optional)</param>
        /// <returns>Chart</returns>
        Chart AssetHistory (string ticker, string currency = null, long? from = null, long? to = null, string granulation = null);

        /// <summary>
        /// Historical information
        /// </summary>
        /// <remarks>
        /// The price history returns data points for the given period. Different granulation of data can be returned based on the length of the period provided from daily to 5 minute (one  price point per period).  From and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned with hourly granulation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="granulation"> (optional)</param>
        /// <returns>ApiResponse of Chart</returns>
        ApiResponse<Chart> AssetHistoryWithHttpInfo (string ticker, string currency = null, long? from = null, long? to = null, string granulation = null);
        /// <summary>
        /// List of Assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all assets on platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Asset&gt;</returns>
        List<Asset> AssetList ();

        /// <summary>
        /// List of Assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all assets on platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Asset&gt;</returns>
        ApiResponse<List<Asset>> AssetListWithHttpInfo ();
        /// <summary>
        /// Statistics
        /// </summary>
        /// <remarks>
        /// Returns statistics of the strategy; returns, max drawdown and volatility for strategy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Statistics</returns>
        Statistics AssetStatistics (string ticker, string currency = null);

        /// <summary>
        /// Statistics
        /// </summary>
        /// <remarks>
        /// Returns statistics of the strategy; returns, max drawdown and volatility for strategy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>ApiResponse of Statistics</returns>
        ApiResponse<Statistics> AssetStatisticsWithHttpInfo (string ticker, string currency = null);
        /// <summary>
        /// Current ticker
        /// </summary>
        /// <remarks>
        /// Returns the current ticker of the Asset. The price is refreshed every minute.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Ticker</returns>
        Ticker AssetTicker (string ticker, string currency = null);

        /// <summary>
        /// Current ticker
        /// </summary>
        /// <remarks>
        /// Returns the current ticker of the Asset. The price is refreshed every minute.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>ApiResponse of Ticker</returns>
        ApiResponse<Ticker> AssetTickerWithHttpInfo (string ticker, string currency = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Asset details
        /// </summary>
        /// <remarks>
        /// Returns information about one specific Asset.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <returns>Task of AssetInfo</returns>
        System.Threading.Tasks.Task<AssetInfo> AssetDetailsAsync (string ticker);

        /// <summary>
        /// Asset details
        /// </summary>
        /// <remarks>
        /// Returns information about one specific Asset.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <returns>Task of ApiResponse (AssetInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetInfo>> AssetDetailsAsyncWithHttpInfo (string ticker);
        /// <summary>
        /// Historical information
        /// </summary>
        /// <remarks>
        /// The price history returns data points for the given period. Different granulation of data can be returned based on the length of the period provided from daily to 5 minute (one  price point per period).  From and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned with hourly granulation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="granulation"> (optional)</param>
        /// <returns>Task of Chart</returns>
        System.Threading.Tasks.Task<Chart> AssetHistoryAsync (string ticker, string currency = null, long? from = null, long? to = null, string granulation = null);

        /// <summary>
        /// Historical information
        /// </summary>
        /// <remarks>
        /// The price history returns data points for the given period. Different granulation of data can be returned based on the length of the period provided from daily to 5 minute (one  price point per period).  From and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned with hourly granulation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="granulation"> (optional)</param>
        /// <returns>Task of ApiResponse (Chart)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chart>> AssetHistoryAsyncWithHttpInfo (string ticker, string currency = null, long? from = null, long? to = null, string granulation = null);
        /// <summary>
        /// List of Assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all assets on platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Asset&gt;</returns>
        System.Threading.Tasks.Task<List<Asset>> AssetListAsync ();

        /// <summary>
        /// List of Assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all assets on platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Asset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Asset>>> AssetListAsyncWithHttpInfo ();
        /// <summary>
        /// Statistics
        /// </summary>
        /// <remarks>
        /// Returns statistics of the strategy; returns, max drawdown and volatility for strategy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of Statistics</returns>
        System.Threading.Tasks.Task<Statistics> AssetStatisticsAsync (string ticker, string currency = null);

        /// <summary>
        /// Statistics
        /// </summary>
        /// <remarks>
        /// Returns statistics of the strategy; returns, max drawdown and volatility for strategy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of ApiResponse (Statistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<Statistics>> AssetStatisticsAsyncWithHttpInfo (string ticker, string currency = null);
        /// <summary>
        /// Current ticker
        /// </summary>
        /// <remarks>
        /// Returns the current ticker of the Asset. The price is refreshed every minute.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of Ticker</returns>
        System.Threading.Tasks.Task<Ticker> AssetTickerAsync (string ticker, string currency = null);

        /// <summary>
        /// Current ticker
        /// </summary>
        /// <remarks>
        /// Returns the current ticker of the Asset. The price is refreshed every minute.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of ApiResponse (Ticker)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ticker>> AssetTickerAsyncWithHttpInfo (string ticker, string currency = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AssetApi : IAssetApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssetApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Asset details Returns information about one specific Asset.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <returns>AssetInfo</returns>
        public AssetInfo AssetDetails (string ticker)
        {
             ApiResponse<AssetInfo> localVarResponse = AssetDetailsWithHttpInfo(ticker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Asset details Returns information about one specific Asset.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <returns>ApiResponse of AssetInfo</returns>
        public ApiResponse< AssetInfo > AssetDetailsWithHttpInfo (string ticker)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling AssetApi->AssetDetails");

            var localVarPath = "./v1/assets/{ticker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AssetInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetInfo)));
        }

        /// <summary>
        /// Asset details Returns information about one specific Asset.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <returns>Task of AssetInfo</returns>
        public async System.Threading.Tasks.Task<AssetInfo> AssetDetailsAsync (string ticker)
        {
             ApiResponse<AssetInfo> localVarResponse = await AssetDetailsAsyncWithHttpInfo(ticker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Asset details Returns information about one specific Asset.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <returns>Task of ApiResponse (AssetInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetInfo>> AssetDetailsAsyncWithHttpInfo (string ticker)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling AssetApi->AssetDetails");

            var localVarPath = "./v1/assets/{ticker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AssetInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetInfo)));
        }

        /// <summary>
        /// Historical information The price history returns data points for the given period. Different granulation of data can be returned based on the length of the period provided from daily to 5 minute (one  price point per period).  From and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned with hourly granulation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="granulation"> (optional)</param>
        /// <returns>Chart</returns>
        public Chart AssetHistory (string ticker, string currency = null, long? from = null, long? to = null, string granulation = null)
        {
             ApiResponse<Chart> localVarResponse = AssetHistoryWithHttpInfo(ticker, currency, from, to, granulation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Historical information The price history returns data points for the given period. Different granulation of data can be returned based on the length of the period provided from daily to 5 minute (one  price point per period).  From and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned with hourly granulation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="granulation"> (optional)</param>
        /// <returns>ApiResponse of Chart</returns>
        public ApiResponse< Chart > AssetHistoryWithHttpInfo (string ticker, string currency = null, long? from = null, long? to = null, string granulation = null)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling AssetApi->AssetHistory");

            var localVarPath = "./v1/assets/{ticker}/pricehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (granulation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granulation", granulation)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chart>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Chart) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chart)));
        }

        /// <summary>
        /// Historical information The price history returns data points for the given period. Different granulation of data can be returned based on the length of the period provided from daily to 5 minute (one  price point per period).  From and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned with hourly granulation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="granulation"> (optional)</param>
        /// <returns>Task of Chart</returns>
        public async System.Threading.Tasks.Task<Chart> AssetHistoryAsync (string ticker, string currency = null, long? from = null, long? to = null, string granulation = null)
        {
             ApiResponse<Chart> localVarResponse = await AssetHistoryAsyncWithHttpInfo(ticker, currency, from, to, granulation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Historical information The price history returns data points for the given period. Different granulation of data can be returned based on the length of the period provided from daily to 5 minute (one  price point per period).  From and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned with hourly granulation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="granulation"> (optional)</param>
        /// <returns>Task of ApiResponse (Chart)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Chart>> AssetHistoryAsyncWithHttpInfo (string ticker, string currency = null, long? from = null, long? to = null, string granulation = null)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling AssetApi->AssetHistory");

            var localVarPath = "./v1/assets/{ticker}/pricehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (granulation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granulation", granulation)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chart>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Chart) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chart)));
        }

        /// <summary>
        /// List of Assets Returns a list of all assets on platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Asset&gt;</returns>
        public List<Asset> AssetList ()
        {
             ApiResponse<List<Asset>> localVarResponse = AssetListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of Assets Returns a list of all assets on platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Asset&gt;</returns>
        public ApiResponse< List<Asset> > AssetListWithHttpInfo ()
        {

            var localVarPath = "./v1/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Asset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Asset>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Asset>)));
        }

        /// <summary>
        /// List of Assets Returns a list of all assets on platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Asset&gt;</returns>
        public async System.Threading.Tasks.Task<List<Asset>> AssetListAsync ()
        {
             ApiResponse<List<Asset>> localVarResponse = await AssetListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of Assets Returns a list of all assets on platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Asset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Asset>>> AssetListAsyncWithHttpInfo ()
        {

            var localVarPath = "./v1/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Asset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Asset>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Asset>)));
        }

        /// <summary>
        /// Statistics Returns statistics of the strategy; returns, max drawdown and volatility for strategy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Statistics</returns>
        public Statistics AssetStatistics (string ticker, string currency = null)
        {
             ApiResponse<Statistics> localVarResponse = AssetStatisticsWithHttpInfo(ticker, currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Statistics Returns statistics of the strategy; returns, max drawdown and volatility for strategy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>ApiResponse of Statistics</returns>
        public ApiResponse< Statistics > AssetStatisticsWithHttpInfo (string ticker, string currency = null)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling AssetApi->AssetStatistics");

            var localVarPath = "./v1/assets/{ticker}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Statistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Statistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Statistics)));
        }

        /// <summary>
        /// Statistics Returns statistics of the strategy; returns, max drawdown and volatility for strategy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of Statistics</returns>
        public async System.Threading.Tasks.Task<Statistics> AssetStatisticsAsync (string ticker, string currency = null)
        {
             ApiResponse<Statistics> localVarResponse = await AssetStatisticsAsyncWithHttpInfo(ticker, currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Statistics Returns statistics of the strategy; returns, max drawdown and volatility for strategy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of ApiResponse (Statistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Statistics>> AssetStatisticsAsyncWithHttpInfo (string ticker, string currency = null)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling AssetApi->AssetStatistics");

            var localVarPath = "./v1/assets/{ticker}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Statistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Statistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Statistics)));
        }

        /// <summary>
        /// Current ticker Returns the current ticker of the Asset. The price is refreshed every minute.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Ticker</returns>
        public Ticker AssetTicker (string ticker, string currency = null)
        {
             ApiResponse<Ticker> localVarResponse = AssetTickerWithHttpInfo(ticker, currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Current ticker Returns the current ticker of the Asset. The price is refreshed every minute.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>ApiResponse of Ticker</returns>
        public ApiResponse< Ticker > AssetTickerWithHttpInfo (string ticker, string currency = null)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling AssetApi->AssetTicker");

            var localVarPath = "./v1/assets/{ticker}/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetTicker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticker>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Ticker) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticker)));
        }

        /// <summary>
        /// Current ticker Returns the current ticker of the Asset. The price is refreshed every minute.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of Ticker</returns>
        public async System.Threading.Tasks.Task<Ticker> AssetTickerAsync (string ticker, string currency = null)
        {
             ApiResponse<Ticker> localVarResponse = await AssetTickerAsyncWithHttpInfo(ticker, currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Current ticker Returns the current ticker of the Asset. The price is refreshed every minute.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker"></param>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of ApiResponse (Ticker)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ticker>> AssetTickerAsyncWithHttpInfo (string ticker, string currency = null)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling AssetApi->AssetTicker");

            var localVarPath = "./v1/assets/{ticker}/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetTicker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticker>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Ticker) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticker)));
        }

    }
}

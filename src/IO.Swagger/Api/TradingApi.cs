/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITradingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Remove user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>OrderInfo</returns>
        OrderInfo CancelOrder (string orderId, string accountId = null);

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Remove user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>ApiResponse of OrderInfo</returns>
        ApiResponse<OrderInfo> CancelOrderWithHttpInfo (string orderId, string accountId = null);
        /// <summary>
        /// Confirm trade offer
        /// </summary>
        /// <remarks>
        /// This endpoint confirms generated trade offer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <returns>TradeConfirm</returns>
        TradeConfirm ConfirmOffer (string offerId);

        /// <summary>
        /// Confirm trade offer
        /// </summary>
        /// <remarks>
        /// This endpoint confirms generated trade offer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <returns>ApiResponse of TradeConfirm</returns>
        ApiResponse<TradeConfirm> ConfirmOfferWithHttpInfo (string offerId);
        /// <summary>
        /// List of orders
        /// </summary>
        /// <remarks>
        /// Returns a list of all user&#x27;s logical orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <returns>List&lt;OrderInfo&gt;</returns>
        List<OrderInfo> GetAllOrders (string accountId = null);

        /// <summary>
        /// List of orders
        /// </summary>
        /// <remarks>
        /// Returns a list of all user&#x27;s logical orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderInfo&gt;</returns>
        ApiResponse<List<OrderInfo>> GetAllOrdersWithHttpInfo (string accountId = null);
        /// <summary>
        /// Trade offer
        /// </summary>
        /// <remarks>
        /// Generating trade offer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TradeOffer</returns>
        TradeOffer OrderOffer (OrderOffer body = null);

        /// <summary>
        /// Trade offer
        /// </summary>
        /// <remarks>
        /// Generating trade offer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TradeOffer</returns>
        ApiResponse<TradeOffer> OrderOfferWithHttpInfo (OrderOffer body = null);
        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// Placing user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderInfo</returns>
        OrderInfo OrderTrade (Order body = null);

        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// Placing user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderInfo</returns>
        ApiResponse<OrderInfo> OrderTradeWithHttpInfo (Order body = null);
        /// <summary>
        /// Logical order
        /// </summary>
        /// <remarks>
        /// Returns a user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>OrderInfo</returns>
        OrderInfo Status (string orderId, string accountId = null);

        /// <summary>
        /// Logical order
        /// </summary>
        /// <remarks>
        /// Returns a user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>ApiResponse of OrderInfo</returns>
        ApiResponse<OrderInfo> StatusWithHttpInfo (string orderId, string accountId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Remove user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of OrderInfo</returns>
        System.Threading.Tasks.Task<OrderInfo> CancelOrderAsync (string orderId, string accountId = null);

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Remove user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderInfo>> CancelOrderAsyncWithHttpInfo (string orderId, string accountId = null);
        /// <summary>
        /// Confirm trade offer
        /// </summary>
        /// <remarks>
        /// This endpoint confirms generated trade offer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <returns>Task of TradeConfirm</returns>
        System.Threading.Tasks.Task<TradeConfirm> ConfirmOfferAsync (string offerId);

        /// <summary>
        /// Confirm trade offer
        /// </summary>
        /// <remarks>
        /// This endpoint confirms generated trade offer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <returns>Task of ApiResponse (TradeConfirm)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeConfirm>> ConfirmOfferAsyncWithHttpInfo (string offerId);
        /// <summary>
        /// List of orders
        /// </summary>
        /// <remarks>
        /// Returns a list of all user&#x27;s logical orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of List&lt;OrderInfo&gt;</returns>
        System.Threading.Tasks.Task<List<OrderInfo>> GetAllOrdersAsync (string accountId = null);

        /// <summary>
        /// List of orders
        /// </summary>
        /// <remarks>
        /// Returns a list of all user&#x27;s logical orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderInfo>>> GetAllOrdersAsyncWithHttpInfo (string accountId = null);
        /// <summary>
        /// Trade offer
        /// </summary>
        /// <remarks>
        /// Generating trade offer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TradeOffer</returns>
        System.Threading.Tasks.Task<TradeOffer> OrderOfferAsync (OrderOffer body = null);

        /// <summary>
        /// Trade offer
        /// </summary>
        /// <remarks>
        /// Generating trade offer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TradeOffer)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeOffer>> OrderOfferAsyncWithHttpInfo (OrderOffer body = null);
        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// Placing user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrderInfo</returns>
        System.Threading.Tasks.Task<OrderInfo> OrderTradeAsync (Order body = null);

        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// Placing user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderInfo>> OrderTradeAsyncWithHttpInfo (Order body = null);
        /// <summary>
        /// Logical order
        /// </summary>
        /// <remarks>
        /// Returns a user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of OrderInfo</returns>
        System.Threading.Tasks.Task<OrderInfo> StatusAsync (string orderId, string accountId = null);

        /// <summary>
        /// Logical order
        /// </summary>
        /// <remarks>
        /// Returns a user&#x27;s logical order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderInfo>> StatusAsyncWithHttpInfo (string orderId, string accountId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TradingApi : ITradingApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradingApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class
        /// </summary>
        /// <returns></returns>
        public TradingApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TradingApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Remove user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>OrderInfo</returns>
        public OrderInfo CancelOrder (string orderId, string accountId = null)
        {
             ApiResponse<OrderInfo> localVarResponse = CancelOrderWithHttpInfo(orderId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Remove user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>ApiResponse of OrderInfo</returns>
        public ApiResponse< OrderInfo > CancelOrderWithHttpInfo (string orderId, string accountId = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling TradingApi->CancelOrder");

            var localVarPath = "./v1/order/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderInfo)));
        }

        /// <summary>
        /// Delete Remove user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of OrderInfo</returns>
        public async System.Threading.Tasks.Task<OrderInfo> CancelOrderAsync (string orderId, string accountId = null)
        {
             ApiResponse<OrderInfo> localVarResponse = await CancelOrderAsyncWithHttpInfo(orderId, accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Remove user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderInfo>> CancelOrderAsyncWithHttpInfo (string orderId, string accountId = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling TradingApi->CancelOrder");

            var localVarPath = "./v1/order/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderInfo)));
        }

        /// <summary>
        /// Confirm trade offer This endpoint confirms generated trade offer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <returns>TradeConfirm</returns>
        public TradeConfirm ConfirmOffer (string offerId)
        {
             ApiResponse<TradeConfirm> localVarResponse = ConfirmOfferWithHttpInfo(offerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm trade offer This endpoint confirms generated trade offer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <returns>ApiResponse of TradeConfirm</returns>
        public ApiResponse< TradeConfirm > ConfirmOfferWithHttpInfo (string offerId)
        {
            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new ApiException(400, "Missing required parameter 'offerId' when calling TradingApi->ConfirmOffer");

            var localVarPath = "./v1/order/offer/{offerId}/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offerId != null) localVarPathParams.Add("offerId", this.Configuration.ApiClient.ParameterToString(offerId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeConfirm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TradeConfirm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeConfirm)));
        }

        /// <summary>
        /// Confirm trade offer This endpoint confirms generated trade offer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <returns>Task of TradeConfirm</returns>
        public async System.Threading.Tasks.Task<TradeConfirm> ConfirmOfferAsync (string offerId)
        {
             ApiResponse<TradeConfirm> localVarResponse = await ConfirmOfferAsyncWithHttpInfo(offerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm trade offer This endpoint confirms generated trade offer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <returns>Task of ApiResponse (TradeConfirm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeConfirm>> ConfirmOfferAsyncWithHttpInfo (string offerId)
        {
            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new ApiException(400, "Missing required parameter 'offerId' when calling TradingApi->ConfirmOffer");

            var localVarPath = "./v1/order/offer/{offerId}/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offerId != null) localVarPathParams.Add("offerId", this.Configuration.ApiClient.ParameterToString(offerId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeConfirm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TradeConfirm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeConfirm)));
        }

        /// <summary>
        /// List of orders Returns a list of all user&#x27;s logical orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <returns>List&lt;OrderInfo&gt;</returns>
        public List<OrderInfo> GetAllOrders (string accountId = null)
        {
             ApiResponse<List<OrderInfo>> localVarResponse = GetAllOrdersWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of orders Returns a list of all user&#x27;s logical orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderInfo&gt;</returns>
        public ApiResponse< List<OrderInfo> > GetAllOrdersWithHttpInfo (string accountId = null)
        {

            var localVarPath = "./v1/order/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OrderInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderInfo>)));
        }

        /// <summary>
        /// List of orders Returns a list of all user&#x27;s logical orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of List&lt;OrderInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderInfo>> GetAllOrdersAsync (string accountId = null)
        {
             ApiResponse<List<OrderInfo>> localVarResponse = await GetAllOrdersAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of orders Returns a list of all user&#x27;s logical orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderInfo>>> GetAllOrdersAsyncWithHttpInfo (string accountId = null)
        {

            var localVarPath = "./v1/order/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OrderInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderInfo>)));
        }

        /// <summary>
        /// Trade offer Generating trade offer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TradeOffer</returns>
        public TradeOffer OrderOffer (OrderOffer body = null)
        {
             ApiResponse<TradeOffer> localVarResponse = OrderOfferWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trade offer Generating trade offer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TradeOffer</returns>
        public ApiResponse< TradeOffer > OrderOfferWithHttpInfo (OrderOffer body = null)
        {

            var localVarPath = "./v1/order/offer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeOffer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TradeOffer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeOffer)));
        }

        /// <summary>
        /// Trade offer Generating trade offer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TradeOffer</returns>
        public async System.Threading.Tasks.Task<TradeOffer> OrderOfferAsync (OrderOffer body = null)
        {
             ApiResponse<TradeOffer> localVarResponse = await OrderOfferAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trade offer Generating trade offer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TradeOffer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeOffer>> OrderOfferAsyncWithHttpInfo (OrderOffer body = null)
        {

            var localVarPath = "./v1/order/offer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeOffer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TradeOffer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeOffer)));
        }

        /// <summary>
        /// Place order Placing user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderInfo</returns>
        public OrderInfo OrderTrade (Order body = null)
        {
             ApiResponse<OrderInfo> localVarResponse = OrderTradeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place order Placing user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderInfo</returns>
        public ApiResponse< OrderInfo > OrderTradeWithHttpInfo (Order body = null)
        {

            var localVarPath = "./v1/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderTrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderInfo)));
        }

        /// <summary>
        /// Place order Placing user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrderInfo</returns>
        public async System.Threading.Tasks.Task<OrderInfo> OrderTradeAsync (Order body = null)
        {
             ApiResponse<OrderInfo> localVarResponse = await OrderTradeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place order Placing user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderInfo>> OrderTradeAsyncWithHttpInfo (Order body = null)
        {

            var localVarPath = "./v1/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderTrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderInfo)));
        }

        /// <summary>
        /// Logical order Returns a user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>OrderInfo</returns>
        public OrderInfo Status (string orderId, string accountId = null)
        {
             ApiResponse<OrderInfo> localVarResponse = StatusWithHttpInfo(orderId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logical order Returns a user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>ApiResponse of OrderInfo</returns>
        public ApiResponse< OrderInfo > StatusWithHttpInfo (string orderId, string accountId = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling TradingApi->Status");

            var localVarPath = "./v1/order/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Status", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderInfo)));
        }

        /// <summary>
        /// Logical order Returns a user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of OrderInfo</returns>
        public async System.Threading.Tasks.Task<OrderInfo> StatusAsync (string orderId, string accountId = null)
        {
             ApiResponse<OrderInfo> localVarResponse = await StatusAsyncWithHttpInfo(orderId, accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logical order Returns a user&#x27;s logical order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="accountId"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderInfo>> StatusAsyncWithHttpInfo (string orderId, string accountId = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling TradingApi->Status");

            var localVarPath = "./v1/order/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountId", accountId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Status", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderInfo)));
        }

    }
}

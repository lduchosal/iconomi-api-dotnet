/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>
        /// Endpoint returns user&#x27;s activity (buy, sell, deposit, withdraw).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional, default to MY_ACTIVITIES)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Activity</returns>
        Activity GetActivities (string type = null, int? pageSize = null, int? pageNumber = null);

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>
        /// Endpoint returns user&#x27;s activity (buy, sell, deposit, withdraw).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional, default to MY_ACTIVITIES)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>ApiResponse of Activity</returns>
        ApiResponse<Activity> GetActivitiesWithHttpInfo (string type = null, int? pageSize = null, int? pageNumber = null);
        /// <summary>
        /// Deposit
        /// </summary>
        /// <remarks>
        /// Endpoint returns user&#x27;s crypto address.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Deposit</returns>
        Deposit GetDepositAddress (string currency);

        /// <summary>
        /// Deposit
        /// </summary>
        /// <remarks>
        /// Endpoint returns user&#x27;s crypto address.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>ApiResponse of Deposit</returns>
        ApiResponse<Deposit> GetDepositAddressWithHttpInfo (string currency);
        /// <summary>
        /// User Balance
        /// </summary>
        /// <remarks>
        /// Endpoint requires authentication. Returns the balance based on the authentication of the user.   There is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.  ##### Request  Empty body.  ##### Response  | Parameter  | Description   | Sample  | |- --|- --|- --| | **currency** &lt;br&gt; *String*        |   Currency in which the values are returned | USD  | | **daaList** &lt;br&gt; *BalanceEntry*     | Array of portfolios balances   |   | | **assetList** &lt;br&gt; *BalanceEntry*     | Array of cryptocurrency balances  |   |  BalanceEntry is of the following structure:  | Parameter  | Description   | Sample  | | - --|- --|- --| | **name** &lt;br&gt; _String_ | Name of asset | Blockchain index  | | **ticker** &lt;br&gt; _String_  | Ticker of asset  | BLX  | | **balance** &lt;br&gt; _String_  | Balance of the asset  | 1337  | | **value** &lt;br&gt; _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Balance</returns>
        Balance GetUserBalance (string currency = null);

        /// <summary>
        /// User Balance
        /// </summary>
        /// <remarks>
        /// Endpoint requires authentication. Returns the balance based on the authentication of the user.   There is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.  ##### Request  Empty body.  ##### Response  | Parameter  | Description   | Sample  | |- --|- --|- --| | **currency** &lt;br&gt; *String*        |   Currency in which the values are returned | USD  | | **daaList** &lt;br&gt; *BalanceEntry*     | Array of portfolios balances   |   | | **assetList** &lt;br&gt; *BalanceEntry*     | Array of cryptocurrency balances  |   |  BalanceEntry is of the following structure:  | Parameter  | Description   | Sample  | | - --|- --|- --| | **name** &lt;br&gt; _String_ | Name of asset | Blockchain index  | | **ticker** &lt;br&gt; _String_  | Ticker of asset  | BLX  | | **balance** &lt;br&gt; _String_  | Balance of the asset  | 1337  | | **value** &lt;br&gt; _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>ApiResponse of Balance</returns>
        ApiResponse<Balance> GetUserBalanceWithHttpInfo (string currency = null);
        /// <summary>
        /// Transaction
        /// </summary>
        /// <remarks>
        /// Endpoint returns details about user&#x27;s transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <returns>Transaction</returns>
        Transaction TransactionInfo (string transactionId);

        /// <summary>
        /// Transaction
        /// </summary>
        /// <remarks>
        /// Endpoint returns details about user&#x27;s transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> TransactionInfoWithHttpInfo (string transactionId);
        /// <summary>
        /// Withdraw
        /// </summary>
        /// <remarks>
        /// Endpoint allows to make withdraw asset from user&#x27;s account to recipient&#x27;s address. Recipient&#x27;s address must be whitelisted at ICONOMI platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Transaction</returns>
        Transaction Withdraw (Withdraw body = null);

        /// <summary>
        /// Withdraw
        /// </summary>
        /// <remarks>
        /// Endpoint allows to make withdraw asset from user&#x27;s account to recipient&#x27;s address. Recipient&#x27;s address must be whitelisted at ICONOMI platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> WithdrawWithHttpInfo (Withdraw body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>
        /// Endpoint returns user&#x27;s activity (buy, sell, deposit, withdraw).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional, default to MY_ACTIVITIES)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task<Activity> GetActivitiesAsync (string type = null, int? pageSize = null, int? pageNumber = null);

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>
        /// Endpoint returns user&#x27;s activity (buy, sell, deposit, withdraw).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional, default to MY_ACTIVITIES)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        System.Threading.Tasks.Task<ApiResponse<Activity>> GetActivitiesAsyncWithHttpInfo (string type = null, int? pageSize = null, int? pageNumber = null);
        /// <summary>
        /// Deposit
        /// </summary>
        /// <remarks>
        /// Endpoint returns user&#x27;s crypto address.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of Deposit</returns>
        System.Threading.Tasks.Task<Deposit> GetDepositAddressAsync (string currency);

        /// <summary>
        /// Deposit
        /// </summary>
        /// <remarks>
        /// Endpoint returns user&#x27;s crypto address.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (Deposit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Deposit>> GetDepositAddressAsyncWithHttpInfo (string currency);
        /// <summary>
        /// User Balance
        /// </summary>
        /// <remarks>
        /// Endpoint requires authentication. Returns the balance based on the authentication of the user.   There is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.  ##### Request  Empty body.  ##### Response  | Parameter  | Description   | Sample  | |- --|- --|- --| | **currency** &lt;br&gt; *String*        |   Currency in which the values are returned | USD  | | **daaList** &lt;br&gt; *BalanceEntry*     | Array of portfolios balances   |   | | **assetList** &lt;br&gt; *BalanceEntry*     | Array of cryptocurrency balances  |   |  BalanceEntry is of the following structure:  | Parameter  | Description   | Sample  | | - --|- --|- --| | **name** &lt;br&gt; _String_ | Name of asset | Blockchain index  | | **ticker** &lt;br&gt; _String_  | Ticker of asset  | BLX  | | **balance** &lt;br&gt; _String_  | Balance of the asset  | 1337  | | **value** &lt;br&gt; _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of Balance</returns>
        System.Threading.Tasks.Task<Balance> GetUserBalanceAsync (string currency = null);

        /// <summary>
        /// User Balance
        /// </summary>
        /// <remarks>
        /// Endpoint requires authentication. Returns the balance based on the authentication of the user.   There is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.  ##### Request  Empty body.  ##### Response  | Parameter  | Description   | Sample  | |- --|- --|- --| | **currency** &lt;br&gt; *String*        |   Currency in which the values are returned | USD  | | **daaList** &lt;br&gt; *BalanceEntry*     | Array of portfolios balances   |   | | **assetList** &lt;br&gt; *BalanceEntry*     | Array of cryptocurrency balances  |   |  BalanceEntry is of the following structure:  | Parameter  | Description   | Sample  | | - --|- --|- --| | **name** &lt;br&gt; _String_ | Name of asset | Blockchain index  | | **ticker** &lt;br&gt; _String_  | Ticker of asset  | BLX  | | **balance** &lt;br&gt; _String_  | Balance of the asset  | 1337  | | **value** &lt;br&gt; _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of ApiResponse (Balance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Balance>> GetUserBalanceAsyncWithHttpInfo (string currency = null);
        /// <summary>
        /// Transaction
        /// </summary>
        /// <remarks>
        /// Endpoint returns details about user&#x27;s transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> TransactionInfoAsync (string transactionId);

        /// <summary>
        /// Transaction
        /// </summary>
        /// <remarks>
        /// Endpoint returns details about user&#x27;s transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> TransactionInfoAsyncWithHttpInfo (string transactionId);
        /// <summary>
        /// Withdraw
        /// </summary>
        /// <remarks>
        /// Endpoint allows to make withdraw asset from user&#x27;s account to recipient&#x27;s address. Recipient&#x27;s address must be whitelisted at ICONOMI platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> WithdrawAsync (Withdraw body = null);

        /// <summary>
        /// Withdraw
        /// </summary>
        /// <remarks>
        /// Endpoint allows to make withdraw asset from user&#x27;s account to recipient&#x27;s address. Recipient&#x27;s address must be whitelisted at ICONOMI platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> WithdrawAsyncWithHttpInfo (Withdraw body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UserApi : IUserApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// </summary>
        /// <returns></returns>
        public UserApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activity Endpoint returns user&#x27;s activity (buy, sell, deposit, withdraw).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional, default to MY_ACTIVITIES)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Activity</returns>
        public Activity GetActivities (string type = null, int? pageSize = null, int? pageNumber = null)
        {
             ApiResponse<Activity> localVarResponse = GetActivitiesWithHttpInfo(type, pageSize, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activity Endpoint returns user&#x27;s activity (buy, sell, deposit, withdraw).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional, default to MY_ACTIVITIES)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>ApiResponse of Activity</returns>
        public ApiResponse< Activity > GetActivitiesWithHttpInfo (string type = null, int? pageSize = null, int? pageNumber = null)
        {

            var localVarPath = "./v1/user/activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Activity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Activity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity)));
        }

        /// <summary>
        /// Activity Endpoint returns user&#x27;s activity (buy, sell, deposit, withdraw).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional, default to MY_ACTIVITIES)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task<Activity> GetActivitiesAsync (string type = null, int? pageSize = null, int? pageNumber = null)
        {
             ApiResponse<Activity> localVarResponse = await GetActivitiesAsyncWithHttpInfo(type, pageSize, pageNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activity Endpoint returns user&#x27;s activity (buy, sell, deposit, withdraw).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional, default to MY_ACTIVITIES)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Activity>> GetActivitiesAsyncWithHttpInfo (string type = null, int? pageSize = null, int? pageNumber = null)
        {

            var localVarPath = "./v1/user/activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Activity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Activity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity)));
        }

        /// <summary>
        /// Deposit Endpoint returns user&#x27;s crypto address.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Deposit</returns>
        public Deposit GetDepositAddress (string currency)
        {
             ApiResponse<Deposit> localVarResponse = GetDepositAddressWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deposit Endpoint returns user&#x27;s crypto address.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>ApiResponse of Deposit</returns>
        public ApiResponse< Deposit > GetDepositAddressWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UserApi->GetDepositAddress");

            var localVarPath = "./v1/user/deposit/{currency}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepositAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Deposit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Deposit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Deposit)));
        }

        /// <summary>
        /// Deposit Endpoint returns user&#x27;s crypto address.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of Deposit</returns>
        public async System.Threading.Tasks.Task<Deposit> GetDepositAddressAsync (string currency)
        {
             ApiResponse<Deposit> localVarResponse = await GetDepositAddressAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deposit Endpoint returns user&#x27;s crypto address.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (Deposit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Deposit>> GetDepositAddressAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UserApi->GetDepositAddress");

            var localVarPath = "./v1/user/deposit/{currency}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepositAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Deposit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Deposit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Deposit)));
        }

        /// <summary>
        /// User Balance Endpoint requires authentication. Returns the balance based on the authentication of the user.   There is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.  ##### Request  Empty body.  ##### Response  | Parameter  | Description   | Sample  | |- --|- --|- --| | **currency** &lt;br&gt; *String*        |   Currency in which the values are returned | USD  | | **daaList** &lt;br&gt; *BalanceEntry*     | Array of portfolios balances   |   | | **assetList** &lt;br&gt; *BalanceEntry*     | Array of cryptocurrency balances  |   |  BalanceEntry is of the following structure:  | Parameter  | Description   | Sample  | | - --|- --|- --| | **name** &lt;br&gt; _String_ | Name of asset | Blockchain index  | | **ticker** &lt;br&gt; _String_  | Ticker of asset  | BLX  | | **balance** &lt;br&gt; _String_  | Balance of the asset  | 1337  | | **value** &lt;br&gt; _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Balance</returns>
        public Balance GetUserBalance (string currency = null)
        {
             ApiResponse<Balance> localVarResponse = GetUserBalanceWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// User Balance Endpoint requires authentication. Returns the balance based on the authentication of the user.   There is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.  ##### Request  Empty body.  ##### Response  | Parameter  | Description   | Sample  | |- --|- --|- --| | **currency** &lt;br&gt; *String*        |   Currency in which the values are returned | USD  | | **daaList** &lt;br&gt; *BalanceEntry*     | Array of portfolios balances   |   | | **assetList** &lt;br&gt; *BalanceEntry*     | Array of cryptocurrency balances  |   |  BalanceEntry is of the following structure:  | Parameter  | Description   | Sample  | | - --|- --|- --| | **name** &lt;br&gt; _String_ | Name of asset | Blockchain index  | | **ticker** &lt;br&gt; _String_  | Ticker of asset  | BLX  | | **balance** &lt;br&gt; _String_  | Balance of the asset  | 1337  | | **value** &lt;br&gt; _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>ApiResponse of Balance</returns>
        public ApiResponse< Balance > GetUserBalanceWithHttpInfo (string currency = null)
        {

            var localVarPath = "./v1/user/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Balance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
        }

        /// <summary>
        /// User Balance Endpoint requires authentication. Returns the balance based on the authentication of the user.   There is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.  ##### Request  Empty body.  ##### Response  | Parameter  | Description   | Sample  | |- --|- --|- --| | **currency** &lt;br&gt; *String*        |   Currency in which the values are returned | USD  | | **daaList** &lt;br&gt; *BalanceEntry*     | Array of portfolios balances   |   | | **assetList** &lt;br&gt; *BalanceEntry*     | Array of cryptocurrency balances  |   |  BalanceEntry is of the following structure:  | Parameter  | Description   | Sample  | | - --|- --|- --| | **name** &lt;br&gt; _String_ | Name of asset | Blockchain index  | | **ticker** &lt;br&gt; _String_  | Ticker of asset  | BLX  | | **balance** &lt;br&gt; _String_  | Balance of the asset  | 1337  | | **value** &lt;br&gt; _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of Balance</returns>
        public async System.Threading.Tasks.Task<Balance> GetUserBalanceAsync (string currency = null)
        {
             ApiResponse<Balance> localVarResponse = await GetUserBalanceAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// User Balance Endpoint requires authentication. Returns the balance based on the authentication of the user.   There is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.  ##### Request  Empty body.  ##### Response  | Parameter  | Description   | Sample  | |- --|- --|- --| | **currency** &lt;br&gt; *String*        |   Currency in which the values are returned | USD  | | **daaList** &lt;br&gt; *BalanceEntry*     | Array of portfolios balances   |   | | **assetList** &lt;br&gt; *BalanceEntry*     | Array of cryptocurrency balances  |   |  BalanceEntry is of the following structure:  | Parameter  | Description   | Sample  | | - --|- --|- --| | **name** &lt;br&gt; _String_ | Name of asset | Blockchain index  | | **ticker** &lt;br&gt; _String_  | Ticker of asset  | BLX  | | **balance** &lt;br&gt; _String_  | Balance of the asset  | 1337  | | **value** &lt;br&gt; _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional, default to USD)</param>
        /// <returns>Task of ApiResponse (Balance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Balance>> GetUserBalanceAsyncWithHttpInfo (string currency = null)
        {

            var localVarPath = "./v1/user/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Balance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
        }

        /// <summary>
        /// Transaction Endpoint returns details about user&#x27;s transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <returns>Transaction</returns>
        public Transaction TransactionInfo (string transactionId)
        {
             ApiResponse<Transaction> localVarResponse = TransactionInfoWithHttpInfo(transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transaction Endpoint returns details about user&#x27;s transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse< Transaction > TransactionInfoWithHttpInfo (string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling UserApi->TransactionInfo");

            var localVarPath = "./v1/user/transaction/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Transaction Endpoint returns details about user&#x27;s transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> TransactionInfoAsync (string transactionId)
        {
             ApiResponse<Transaction> localVarResponse = await TransactionInfoAsyncWithHttpInfo(transactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transaction Endpoint returns details about user&#x27;s transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> TransactionInfoAsyncWithHttpInfo (string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling UserApi->TransactionInfo");

            var localVarPath = "./v1/user/transaction/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Withdraw Endpoint allows to make withdraw asset from user&#x27;s account to recipient&#x27;s address. Recipient&#x27;s address must be whitelisted at ICONOMI platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Transaction</returns>
        public Transaction Withdraw (Withdraw body = null)
        {
             ApiResponse<Transaction> localVarResponse = WithdrawWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw Endpoint allows to make withdraw asset from user&#x27;s account to recipient&#x27;s address. Recipient&#x27;s address must be whitelisted at ICONOMI platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse< Transaction > WithdrawWithHttpInfo (Withdraw body = null)
        {

            var localVarPath = "./v1/user/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Withdraw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Withdraw Endpoint allows to make withdraw asset from user&#x27;s account to recipient&#x27;s address. Recipient&#x27;s address must be whitelisted at ICONOMI platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> WithdrawAsync (Withdraw body = null)
        {
             ApiResponse<Transaction> localVarResponse = await WithdrawAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Withdraw Endpoint allows to make withdraw asset from user&#x27;s account to recipient&#x27;s address. Recipient&#x27;s address must be whitelisted at ICONOMI platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> WithdrawAsyncWithHttpInfo (Withdraw body = null)
        {

            var localVarPath = "./v1/user/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Withdraw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

    }
}

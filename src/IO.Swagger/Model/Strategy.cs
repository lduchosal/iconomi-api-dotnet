/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Strategy
    /// </summary>
    [DataContract]
        public partial class Strategy :  IEquatable<Strategy>
    {
        /// <summary>
        /// Defines ManagementType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ManagementTypeEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,
            /// <summary>
            /// Enum PASSIVE for value: PASSIVE
            /// </summary>
            [EnumMember(Value = "PASSIVE")]
            PASSIVE = 2        }
        /// <summary>
        /// Gets or Sets ManagementType
        /// </summary>
        [DataMember(Name="managementType", EmitDefaultValue=false)]
        public ManagementTypeEnum? ManagementType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Strategy" /> class.
        /// </summary>
        /// <param name="ticker">ticker.</param>
        /// <param name="name">name.</param>
        /// <param name="manager">manager.</param>
        /// <param name="managementType">managementType.</param>
        /// <param name="managementFee">managementFee.</param>
        /// <param name="performanceFee">performanceFee.</param>
        /// <param name="performanceFeeCollectionPeriod">performanceFeeCollectionPeriod.</param>
        /// <param name="entryFee">entryFee.</param>
        /// <param name="exitFee">exitFee.</param>
        /// <param name="followers">followers.</param>
        public Strategy(string ticker = default(string), string name = default(string), string manager = default(string), ManagementTypeEnum? managementType = default(ManagementTypeEnum?), decimal? managementFee = default(decimal?), decimal? performanceFee = default(decimal?), string performanceFeeCollectionPeriod = default(string), decimal? entryFee = default(decimal?), decimal? exitFee = default(decimal?), long? followers = default(long?))
        {
            this.Ticker = ticker;
            this.Name = name;
            this.Manager = manager;
            this.ManagementType = managementType;
            this.ManagementFee = managementFee;
            this.PerformanceFee = performanceFee;
            this.PerformanceFeeCollectionPeriod = performanceFeeCollectionPeriod;
            this.EntryFee = entryFee;
            this.ExitFee = exitFee;
            this.Followers = followers;
        }
        
        /// <summary>
        /// Gets or Sets Ticker
        /// </summary>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Manager
        /// </summary>
        [DataMember(Name="manager", EmitDefaultValue=false)]
        public string Manager { get; set; }


        /// <summary>
        /// Gets or Sets ManagementFee
        /// </summary>
        [DataMember(Name="managementFee", EmitDefaultValue=false)]
        public decimal? ManagementFee { get; set; }

        /// <summary>
        /// Gets or Sets PerformanceFee
        /// </summary>
        [DataMember(Name="performanceFee", EmitDefaultValue=false)]
        public decimal? PerformanceFee { get; set; }

        /// <summary>
        /// Gets or Sets PerformanceFeeCollectionPeriod
        /// </summary>
        [DataMember(Name="performanceFeeCollectionPeriod", EmitDefaultValue=false)]
        public string PerformanceFeeCollectionPeriod { get; set; }

        /// <summary>
        /// Gets or Sets EntryFee
        /// </summary>
        [DataMember(Name="entryFee", EmitDefaultValue=false)]
        public decimal? EntryFee { get; set; }

        /// <summary>
        /// Gets or Sets ExitFee
        /// </summary>
        [DataMember(Name="exitFee", EmitDefaultValue=false)]
        public decimal? ExitFee { get; set; }

        /// <summary>
        /// Gets or Sets Followers
        /// </summary>
        [DataMember(Name="followers", EmitDefaultValue=false)]
        public long? Followers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Strategy {\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Manager: ").Append(Manager).Append("\n");
            sb.Append("  ManagementType: ").Append(ManagementType).Append("\n");
            sb.Append("  ManagementFee: ").Append(ManagementFee).Append("\n");
            sb.Append("  PerformanceFee: ").Append(PerformanceFee).Append("\n");
            sb.Append("  PerformanceFeeCollectionPeriod: ").Append(PerformanceFeeCollectionPeriod).Append("\n");
            sb.Append("  EntryFee: ").Append(EntryFee).Append("\n");
            sb.Append("  ExitFee: ").Append(ExitFee).Append("\n");
            sb.Append("  Followers: ").Append(Followers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Strategy);
        }

        /// <summary>
        /// Returns true if Strategy instances are equal
        /// </summary>
        /// <param name="input">Instance of Strategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Strategy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Manager == input.Manager ||
                    (this.Manager != null &&
                    this.Manager.Equals(input.Manager))
                ) && 
                (
                    this.ManagementType == input.ManagementType ||
                    (this.ManagementType != null &&
                    this.ManagementType.Equals(input.ManagementType))
                ) && 
                (
                    this.ManagementFee == input.ManagementFee ||
                    (this.ManagementFee != null &&
                    this.ManagementFee.Equals(input.ManagementFee))
                ) && 
                (
                    this.PerformanceFee == input.PerformanceFee ||
                    (this.PerformanceFee != null &&
                    this.PerformanceFee.Equals(input.PerformanceFee))
                ) && 
                (
                    this.PerformanceFeeCollectionPeriod == input.PerformanceFeeCollectionPeriod ||
                    (this.PerformanceFeeCollectionPeriod != null &&
                    this.PerformanceFeeCollectionPeriod.Equals(input.PerformanceFeeCollectionPeriod))
                ) && 
                (
                    this.EntryFee == input.EntryFee ||
                    (this.EntryFee != null &&
                    this.EntryFee.Equals(input.EntryFee))
                ) && 
                (
                    this.ExitFee == input.ExitFee ||
                    (this.ExitFee != null &&
                    this.ExitFee.Equals(input.ExitFee))
                ) && 
                (
                    this.Followers == input.Followers ||
                    (this.Followers != null &&
                    this.Followers.Equals(input.Followers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Manager != null)
                    hashCode = hashCode * 59 + this.Manager.GetHashCode();
                if (this.ManagementType != null)
                    hashCode = hashCode * 59 + this.ManagementType.GetHashCode();
                if (this.ManagementFee != null)
                    hashCode = hashCode * 59 + this.ManagementFee.GetHashCode();
                if (this.PerformanceFee != null)
                    hashCode = hashCode * 59 + this.PerformanceFee.GetHashCode();
                if (this.PerformanceFeeCollectionPeriod != null)
                    hashCode = hashCode * 59 + this.PerformanceFeeCollectionPeriod.GetHashCode();
                if (this.EntryFee != null)
                    hashCode = hashCode * 59 + this.EntryFee.GetHashCode();
                if (this.ExitFee != null)
                    hashCode = hashCode * 59 + this.ExitFee.GetHashCode();
                if (this.Followers != null)
                    hashCode = hashCode * 59 + this.Followers.GetHashCode();
                return hashCode;
            }
        }
    }
}

/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Ticker
    /// </summary>
    [DataContract]
        public partial class Ticker :  IEquatable<Ticker>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ticker" /> class.
        /// </summary>
        /// <param name="ticker">ticker.</param>
        /// <param name="currency">currency.</param>
        /// <param name="price">price.</param>
        /// <param name="change24h">change24h.</param>
        /// <param name="change7d">change7d.</param>
        /// <param name="change1m">change1m.</param>
        /// <param name="change3m">change3m.</param>
        /// <param name="change6m">change6m.</param>
        /// <param name="change12m">change12m.</param>
        /// <param name="changeAll">changeAll.</param>
        /// <param name="aum">aum.</param>
        public Ticker(string ticker = default(string), string currency = default(string), decimal? price = default(decimal?), decimal? change24h = default(decimal?), decimal? change7d = default(decimal?), decimal? change1m = default(decimal?), decimal? change3m = default(decimal?), decimal? change6m = default(decimal?), decimal? change12m = default(decimal?), decimal? changeAll = default(decimal?), decimal? aum = default(decimal?))
        {
            this._Ticker = ticker;
            this.Currency = currency;
            this.Price = price;
            this.Change24h = change24h;
            this.Change7d = change7d;
            this.Change1m = change1m;
            this.Change3m = change3m;
            this.Change6m = change6m;
            this.Change12m = change12m;
            this.ChangeAll = changeAll;
            this.Aum = aum;
        }
        
        /// <summary>
        /// Gets or Sets _Ticker
        /// </summary>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string _Ticker { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal? Price { get; set; }

        /// <summary>
        /// Gets or Sets Change24h
        /// </summary>
        [DataMember(Name="change24h", EmitDefaultValue=false)]
        public decimal? Change24h { get; set; }

        /// <summary>
        /// Gets or Sets Change7d
        /// </summary>
        [DataMember(Name="change7d", EmitDefaultValue=false)]
        public decimal? Change7d { get; set; }

        /// <summary>
        /// Gets or Sets Change1m
        /// </summary>
        [DataMember(Name="change1m", EmitDefaultValue=false)]
        public decimal? Change1m { get; set; }

        /// <summary>
        /// Gets or Sets Change3m
        /// </summary>
        [DataMember(Name="change3m", EmitDefaultValue=false)]
        public decimal? Change3m { get; set; }

        /// <summary>
        /// Gets or Sets Change6m
        /// </summary>
        [DataMember(Name="change6m", EmitDefaultValue=false)]
        public decimal? Change6m { get; set; }

        /// <summary>
        /// Gets or Sets Change12m
        /// </summary>
        [DataMember(Name="change12m", EmitDefaultValue=false)]
        public decimal? Change12m { get; set; }

        /// <summary>
        /// Gets or Sets ChangeAll
        /// </summary>
        [DataMember(Name="changeAll", EmitDefaultValue=false)]
        public decimal? ChangeAll { get; set; }

        /// <summary>
        /// Gets or Sets Aum
        /// </summary>
        [DataMember(Name="aum", EmitDefaultValue=false)]
        public decimal? Aum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ticker {\n");
            sb.Append("  _Ticker: ").Append(_Ticker).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Change24h: ").Append(Change24h).Append("\n");
            sb.Append("  Change7d: ").Append(Change7d).Append("\n");
            sb.Append("  Change1m: ").Append(Change1m).Append("\n");
            sb.Append("  Change3m: ").Append(Change3m).Append("\n");
            sb.Append("  Change6m: ").Append(Change6m).Append("\n");
            sb.Append("  Change12m: ").Append(Change12m).Append("\n");
            sb.Append("  ChangeAll: ").Append(ChangeAll).Append("\n");
            sb.Append("  Aum: ").Append(Aum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ticker);
        }

        /// <summary>
        /// Returns true if Ticker instances are equal
        /// </summary>
        /// <param name="input">Instance of Ticker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ticker input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Ticker == input._Ticker ||
                    (this._Ticker != null &&
                    this._Ticker.Equals(input._Ticker))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Change24h == input.Change24h ||
                    (this.Change24h != null &&
                    this.Change24h.Equals(input.Change24h))
                ) && 
                (
                    this.Change7d == input.Change7d ||
                    (this.Change7d != null &&
                    this.Change7d.Equals(input.Change7d))
                ) && 
                (
                    this.Change1m == input.Change1m ||
                    (this.Change1m != null &&
                    this.Change1m.Equals(input.Change1m))
                ) && 
                (
                    this.Change3m == input.Change3m ||
                    (this.Change3m != null &&
                    this.Change3m.Equals(input.Change3m))
                ) && 
                (
                    this.Change6m == input.Change6m ||
                    (this.Change6m != null &&
                    this.Change6m.Equals(input.Change6m))
                ) && 
                (
                    this.Change12m == input.Change12m ||
                    (this.Change12m != null &&
                    this.Change12m.Equals(input.Change12m))
                ) && 
                (
                    this.ChangeAll == input.ChangeAll ||
                    (this.ChangeAll != null &&
                    this.ChangeAll.Equals(input.ChangeAll))
                ) && 
                (
                    this.Aum == input.Aum ||
                    (this.Aum != null &&
                    this.Aum.Equals(input.Aum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Ticker != null)
                    hashCode = hashCode * 59 + this._Ticker.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Change24h != null)
                    hashCode = hashCode * 59 + this.Change24h.GetHashCode();
                if (this.Change7d != null)
                    hashCode = hashCode * 59 + this.Change7d.GetHashCode();
                if (this.Change1m != null)
                    hashCode = hashCode * 59 + this.Change1m.GetHashCode();
                if (this.Change3m != null)
                    hashCode = hashCode * 59 + this.Change3m.GetHashCode();
                if (this.Change6m != null)
                    hashCode = hashCode * 59 + this.Change6m.GetHashCode();
                if (this.Change12m != null)
                    hashCode = hashCode * 59 + this.Change12m.GetHashCode();
                if (this.ChangeAll != null)
                    hashCode = hashCode * 59 + this.ChangeAll.GetHashCode();
                if (this.Aum != null)
                    hashCode = hashCode * 59 + this.Aum.GetHashCode();
                return hashCode;
            }
        }
    }
}

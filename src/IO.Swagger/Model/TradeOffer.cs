/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TradeOffer
    /// </summary>
    [DataContract]
        public partial class TradeOffer :  IEquatable<TradeOffer>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeOffer" /> class.
        /// </summary>
        /// <param name="offerId">offerId.</param>
        /// <param name="sourceTicker">sourceTicker.</param>
        /// <param name="targetTicker">targetTicker.</param>
        /// <param name="sourceAmount">sourceAmount.</param>
        /// <param name="targetAmount">targetAmount.</param>
        /// <param name="exchangeRate">exchangeRate.</param>
        /// <param name="feeAmount">feeAmount.</param>
        /// <param name="feeTicker">feeTicker.</param>
        /// <param name="sellingAssets">sellingAssets.</param>
        /// <param name="validTo">validTo.</param>
        /// <param name="serverTime">serverTime.</param>
        /// <param name="error">error.</param>
        /// <param name="used">used.</param>
        public TradeOffer(string offerId = default(string), string sourceTicker = default(string), string targetTicker = default(string), decimal? sourceAmount = default(decimal?), decimal? targetAmount = default(decimal?), decimal? exchangeRate = default(decimal?), decimal? feeAmount = default(decimal?), string feeTicker = default(string), bool? sellingAssets = default(bool?), long? validTo = default(long?), long? serverTime = default(long?), string error = default(string), bool? used = default(bool?))
        {
            this.OfferId = offerId;
            this.SourceTicker = sourceTicker;
            this.TargetTicker = targetTicker;
            this.SourceAmount = sourceAmount;
            this.TargetAmount = targetAmount;
            this.ExchangeRate = exchangeRate;
            this.FeeAmount = feeAmount;
            this.FeeTicker = feeTicker;
            this.SellingAssets = sellingAssets;
            this.ValidTo = validTo;
            this.ServerTime = serverTime;
            this.Error = error;
            this.Used = used;
        }
        
        /// <summary>
        /// Gets or Sets OfferId
        /// </summary>
        [DataMember(Name="offerId", EmitDefaultValue=false)]
        public string OfferId { get; set; }

        /// <summary>
        /// Gets or Sets SourceTicker
        /// </summary>
        [DataMember(Name="sourceTicker", EmitDefaultValue=false)]
        public string SourceTicker { get; set; }

        /// <summary>
        /// Gets or Sets TargetTicker
        /// </summary>
        [DataMember(Name="targetTicker", EmitDefaultValue=false)]
        public string TargetTicker { get; set; }

        /// <summary>
        /// Gets or Sets SourceAmount
        /// </summary>
        [DataMember(Name="sourceAmount", EmitDefaultValue=false)]
        public decimal? SourceAmount { get; set; }

        /// <summary>
        /// Gets or Sets TargetAmount
        /// </summary>
        [DataMember(Name="targetAmount", EmitDefaultValue=false)]
        public decimal? TargetAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public decimal? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmount
        /// </summary>
        [DataMember(Name="feeAmount", EmitDefaultValue=false)]
        public decimal? FeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets FeeTicker
        /// </summary>
        [DataMember(Name="feeTicker", EmitDefaultValue=false)]
        public string FeeTicker { get; set; }

        /// <summary>
        /// Gets or Sets SellingAssets
        /// </summary>
        [DataMember(Name="sellingAssets", EmitDefaultValue=false)]
        public bool? SellingAssets { get; set; }

        /// <summary>
        /// Gets or Sets ValidTo
        /// </summary>
        [DataMember(Name="validTo", EmitDefaultValue=false)]
        public long? ValidTo { get; set; }

        /// <summary>
        /// Gets or Sets ServerTime
        /// </summary>
        [DataMember(Name="serverTime", EmitDefaultValue=false)]
        public long? ServerTime { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets Used
        /// </summary>
        [DataMember(Name="used", EmitDefaultValue=false)]
        public bool? Used { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradeOffer {\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  SourceTicker: ").Append(SourceTicker).Append("\n");
            sb.Append("  TargetTicker: ").Append(TargetTicker).Append("\n");
            sb.Append("  SourceAmount: ").Append(SourceAmount).Append("\n");
            sb.Append("  TargetAmount: ").Append(TargetAmount).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("  FeeTicker: ").Append(FeeTicker).Append("\n");
            sb.Append("  SellingAssets: ").Append(SellingAssets).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  ServerTime: ").Append(ServerTime).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradeOffer);
        }

        /// <summary>
        /// Returns true if TradeOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of TradeOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OfferId == input.OfferId ||
                    (this.OfferId != null &&
                    this.OfferId.Equals(input.OfferId))
                ) && 
                (
                    this.SourceTicker == input.SourceTicker ||
                    (this.SourceTicker != null &&
                    this.SourceTicker.Equals(input.SourceTicker))
                ) && 
                (
                    this.TargetTicker == input.TargetTicker ||
                    (this.TargetTicker != null &&
                    this.TargetTicker.Equals(input.TargetTicker))
                ) && 
                (
                    this.SourceAmount == input.SourceAmount ||
                    (this.SourceAmount != null &&
                    this.SourceAmount.Equals(input.SourceAmount))
                ) && 
                (
                    this.TargetAmount == input.TargetAmount ||
                    (this.TargetAmount != null &&
                    this.TargetAmount.Equals(input.TargetAmount))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.FeeAmount == input.FeeAmount ||
                    (this.FeeAmount != null &&
                    this.FeeAmount.Equals(input.FeeAmount))
                ) && 
                (
                    this.FeeTicker == input.FeeTicker ||
                    (this.FeeTicker != null &&
                    this.FeeTicker.Equals(input.FeeTicker))
                ) && 
                (
                    this.SellingAssets == input.SellingAssets ||
                    (this.SellingAssets != null &&
                    this.SellingAssets.Equals(input.SellingAssets))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                ) && 
                (
                    this.ServerTime == input.ServerTime ||
                    (this.ServerTime != null &&
                    this.ServerTime.Equals(input.ServerTime))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Used == input.Used ||
                    (this.Used != null &&
                    this.Used.Equals(input.Used))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OfferId != null)
                    hashCode = hashCode * 59 + this.OfferId.GetHashCode();
                if (this.SourceTicker != null)
                    hashCode = hashCode * 59 + this.SourceTicker.GetHashCode();
                if (this.TargetTicker != null)
                    hashCode = hashCode * 59 + this.TargetTicker.GetHashCode();
                if (this.SourceAmount != null)
                    hashCode = hashCode * 59 + this.SourceAmount.GetHashCode();
                if (this.TargetAmount != null)
                    hashCode = hashCode * 59 + this.TargetAmount.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.FeeAmount != null)
                    hashCode = hashCode * 59 + this.FeeAmount.GetHashCode();
                if (this.FeeTicker != null)
                    hashCode = hashCode * 59 + this.FeeTicker.GetHashCode();
                if (this.SellingAssets != null)
                    hashCode = hashCode * 59 + this.SellingAssets.GetHashCode();
                if (this.ValidTo != null)
                    hashCode = hashCode * 59 + this.ValidTo.GetHashCode();
                if (this.ServerTime != null)
                    hashCode = hashCode * 59 + this.ServerTime.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Used != null)
                    hashCode = hashCode * 59 + this.Used.GetHashCode();
                return hashCode;
            }
        }
    }
}

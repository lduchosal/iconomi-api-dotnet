/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Transaction
    /// </summary>
    [DataContract]
        public partial class Transaction :  IEquatable<Transaction>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="transactionId">transactionId.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="status">status.</param>
        /// <param name="exchangeRate">exchangeRate.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="address">address.</param>
        /// <param name="type">type.</param>
        /// <param name="kind">kind.</param>
        /// <param name="amountTicker">amountTicker (required).</param>
        /// <param name="amount">amount.</param>
        /// <param name="sourceTicker">sourceTicker (required).</param>
        /// <param name="sourceAmount">sourceAmount.</param>
        /// <param name="targetTicker">targetTicker (required).</param>
        /// <param name="targetAmount">targetAmount.</param>
        /// <param name="feeTicker">feeTicker (required).</param>
        /// <param name="feeAmount">feeAmount.</param>
        /// <param name="vatTicker">vatTicker (required).</param>
        /// <param name="vatAmount">vatAmount.</param>
        /// <param name="performanceFeeTicker">performanceFeeTicker (required).</param>
        /// <param name="performanceFeeAmount">performanceFeeAmount.</param>
        /// <param name="profitTicker">profitTicker (required).</param>
        /// <param name="profitAmount">profitAmount.</param>
        public Transaction(string transactionId = default(string), long? timestamp = default(long?), string status = default(string), decimal? exchangeRate = default(decimal?), string paymentMethod = default(string), string address = default(string), string type = default(string), string kind = default(string), string amountTicker = default(string), decimal? amount = default(decimal?), string sourceTicker = default(string), decimal? sourceAmount = default(decimal?), string targetTicker = default(string), decimal? targetAmount = default(decimal?), string feeTicker = default(string), decimal? feeAmount = default(decimal?), string vatTicker = default(string), decimal? vatAmount = default(decimal?), string performanceFeeTicker = default(string), decimal? performanceFeeAmount = default(decimal?), string profitTicker = default(string), decimal? profitAmount = default(decimal?))
        {
            // to ensure "amountTicker" is required (not null)
            if (amountTicker == null)
            {
                throw new InvalidDataException("amountTicker is a required property for Transaction and cannot be null");
            }
            else
            {
                this.AmountTicker = amountTicker;
            }
            // to ensure "sourceTicker" is required (not null)
            if (sourceTicker == null)
            {
                throw new InvalidDataException("sourceTicker is a required property for Transaction and cannot be null");
            }
            else
            {
                this.SourceTicker = sourceTicker;
            }
            // to ensure "targetTicker" is required (not null)
            if (targetTicker == null)
            {
                throw new InvalidDataException("targetTicker is a required property for Transaction and cannot be null");
            }
            else
            {
                this.TargetTicker = targetTicker;
            }
            // to ensure "feeTicker" is required (not null)
            if (feeTicker == null)
            {
                throw new InvalidDataException("feeTicker is a required property for Transaction and cannot be null");
            }
            else
            {
                this.FeeTicker = feeTicker;
            }
            // to ensure "vatTicker" is required (not null)
            if (vatTicker == null)
            {
                throw new InvalidDataException("vatTicker is a required property for Transaction and cannot be null");
            }
            else
            {
                this.VatTicker = vatTicker;
            }
            // to ensure "performanceFeeTicker" is required (not null)
            if (performanceFeeTicker == null)
            {
                throw new InvalidDataException("performanceFeeTicker is a required property for Transaction and cannot be null");
            }
            else
            {
                this.PerformanceFeeTicker = performanceFeeTicker;
            }
            // to ensure "profitTicker" is required (not null)
            if (profitTicker == null)
            {
                throw new InvalidDataException("profitTicker is a required property for Transaction and cannot be null");
            }
            else
            {
                this.ProfitTicker = profitTicker;
            }
            this.TransactionId = transactionId;
            this.Timestamp = timestamp;
            this.Status = status;
            this.ExchangeRate = exchangeRate;
            this.PaymentMethod = paymentMethod;
            this.Address = address;
            this.Type = type;
            this.Kind = kind;
            this.Amount = amount;
            this.SourceAmount = sourceAmount;
            this.TargetAmount = targetAmount;
            this.FeeAmount = feeAmount;
            this.VatAmount = vatAmount;
            this.PerformanceFeeAmount = performanceFeeAmount;
            this.ProfitAmount = profitAmount;
        }
        
        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public decimal? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or Sets AmountTicker
        /// </summary>
        [DataMember(Name="amount_ticker", EmitDefaultValue=false)]
        public string AmountTicker { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets SourceTicker
        /// </summary>
        [DataMember(Name="source_ticker", EmitDefaultValue=false)]
        public string SourceTicker { get; set; }

        /// <summary>
        /// Gets or Sets SourceAmount
        /// </summary>
        [DataMember(Name="source_amount", EmitDefaultValue=false)]
        public decimal? SourceAmount { get; set; }

        /// <summary>
        /// Gets or Sets TargetTicker
        /// </summary>
        [DataMember(Name="target_ticker", EmitDefaultValue=false)]
        public string TargetTicker { get; set; }

        /// <summary>
        /// Gets or Sets TargetAmount
        /// </summary>
        [DataMember(Name="target_amount", EmitDefaultValue=false)]
        public decimal? TargetAmount { get; set; }

        /// <summary>
        /// Gets or Sets FeeTicker
        /// </summary>
        [DataMember(Name="fee_ticker", EmitDefaultValue=false)]
        public string FeeTicker { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmount
        /// </summary>
        [DataMember(Name="fee_amount", EmitDefaultValue=false)]
        public decimal? FeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets VatTicker
        /// </summary>
        [DataMember(Name="vat_ticker", EmitDefaultValue=false)]
        public string VatTicker { get; set; }

        /// <summary>
        /// Gets or Sets VatAmount
        /// </summary>
        [DataMember(Name="vat_amount", EmitDefaultValue=false)]
        public decimal? VatAmount { get; set; }

        /// <summary>
        /// Gets or Sets PerformanceFeeTicker
        /// </summary>
        [DataMember(Name="performance_fee_ticker", EmitDefaultValue=false)]
        public string PerformanceFeeTicker { get; set; }

        /// <summary>
        /// Gets or Sets PerformanceFeeAmount
        /// </summary>
        [DataMember(Name="performance_fee_amount", EmitDefaultValue=false)]
        public decimal? PerformanceFeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets ProfitTicker
        /// </summary>
        [DataMember(Name="profit_ticker", EmitDefaultValue=false)]
        public string ProfitTicker { get; set; }

        /// <summary>
        /// Gets or Sets ProfitAmount
        /// </summary>
        [DataMember(Name="profit_amount", EmitDefaultValue=false)]
        public decimal? ProfitAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  AmountTicker: ").Append(AmountTicker).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SourceTicker: ").Append(SourceTicker).Append("\n");
            sb.Append("  SourceAmount: ").Append(SourceAmount).Append("\n");
            sb.Append("  TargetTicker: ").Append(TargetTicker).Append("\n");
            sb.Append("  TargetAmount: ").Append(TargetAmount).Append("\n");
            sb.Append("  FeeTicker: ").Append(FeeTicker).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("  VatTicker: ").Append(VatTicker).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  PerformanceFeeTicker: ").Append(PerformanceFeeTicker).Append("\n");
            sb.Append("  PerformanceFeeAmount: ").Append(PerformanceFeeAmount).Append("\n");
            sb.Append("  ProfitTicker: ").Append(ProfitTicker).Append("\n");
            sb.Append("  ProfitAmount: ").Append(ProfitAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.AmountTicker == input.AmountTicker ||
                    (this.AmountTicker != null &&
                    this.AmountTicker.Equals(input.AmountTicker))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.SourceTicker == input.SourceTicker ||
                    (this.SourceTicker != null &&
                    this.SourceTicker.Equals(input.SourceTicker))
                ) && 
                (
                    this.SourceAmount == input.SourceAmount ||
                    (this.SourceAmount != null &&
                    this.SourceAmount.Equals(input.SourceAmount))
                ) && 
                (
                    this.TargetTicker == input.TargetTicker ||
                    (this.TargetTicker != null &&
                    this.TargetTicker.Equals(input.TargetTicker))
                ) && 
                (
                    this.TargetAmount == input.TargetAmount ||
                    (this.TargetAmount != null &&
                    this.TargetAmount.Equals(input.TargetAmount))
                ) && 
                (
                    this.FeeTicker == input.FeeTicker ||
                    (this.FeeTicker != null &&
                    this.FeeTicker.Equals(input.FeeTicker))
                ) && 
                (
                    this.FeeAmount == input.FeeAmount ||
                    (this.FeeAmount != null &&
                    this.FeeAmount.Equals(input.FeeAmount))
                ) && 
                (
                    this.VatTicker == input.VatTicker ||
                    (this.VatTicker != null &&
                    this.VatTicker.Equals(input.VatTicker))
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.PerformanceFeeTicker == input.PerformanceFeeTicker ||
                    (this.PerformanceFeeTicker != null &&
                    this.PerformanceFeeTicker.Equals(input.PerformanceFeeTicker))
                ) && 
                (
                    this.PerformanceFeeAmount == input.PerformanceFeeAmount ||
                    (this.PerformanceFeeAmount != null &&
                    this.PerformanceFeeAmount.Equals(input.PerformanceFeeAmount))
                ) && 
                (
                    this.ProfitTicker == input.ProfitTicker ||
                    (this.ProfitTicker != null &&
                    this.ProfitTicker.Equals(input.ProfitTicker))
                ) && 
                (
                    this.ProfitAmount == input.ProfitAmount ||
                    (this.ProfitAmount != null &&
                    this.ProfitAmount.Equals(input.ProfitAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                if (this.AmountTicker != null)
                    hashCode = hashCode * 59 + this.AmountTicker.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.SourceTicker != null)
                    hashCode = hashCode * 59 + this.SourceTicker.GetHashCode();
                if (this.SourceAmount != null)
                    hashCode = hashCode * 59 + this.SourceAmount.GetHashCode();
                if (this.TargetTicker != null)
                    hashCode = hashCode * 59 + this.TargetTicker.GetHashCode();
                if (this.TargetAmount != null)
                    hashCode = hashCode * 59 + this.TargetAmount.GetHashCode();
                if (this.FeeTicker != null)
                    hashCode = hashCode * 59 + this.FeeTicker.GetHashCode();
                if (this.FeeAmount != null)
                    hashCode = hashCode * 59 + this.FeeAmount.GetHashCode();
                if (this.VatTicker != null)
                    hashCode = hashCode * 59 + this.VatTicker.GetHashCode();
                if (this.VatAmount != null)
                    hashCode = hashCode * 59 + this.VatAmount.GetHashCode();
                if (this.PerformanceFeeTicker != null)
                    hashCode = hashCode * 59 + this.PerformanceFeeTicker.GetHashCode();
                if (this.PerformanceFeeAmount != null)
                    hashCode = hashCode * 59 + this.PerformanceFeeAmount.GetHashCode();
                if (this.ProfitTicker != null)
                    hashCode = hashCode * 59 + this.ProfitTicker.GetHashCode();
                if (this.ProfitAmount != null)
                    hashCode = hashCode * 59 + this.ProfitAmount.GetHashCode();
                return hashCode;
            }
        }
    }
}

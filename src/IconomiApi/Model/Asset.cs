/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IconomiApi.Client.SwaggerDateConverter;

namespace IconomiApi.Model
{
    /// <summary>
    /// Asset
    /// </summary>
    [DataContract]
        public partial class Asset :  IEquatable<Asset>
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum ONLINE for value: ONLINE
            /// </summary>
            [EnumMember(Value = "ONLINE")]
            ONLINE = 1,
            /// <summary>
            /// Enum OFFLINE for value: OFFLINE
            /// </summary>
            [EnumMember(Value = "OFFLINE")]
            OFFLINE = 2,
            /// <summary>
            /// Enum DELISTING for value: DELISTING
            /// </summary>
            [EnumMember(Value = "DELISTING")]
            DELISTING = 3,
            /// <summary>
            /// Enum DELISTED for value: DELISTED
            /// </summary>
            [EnumMember(Value = "DELISTED")]
            DELISTED = 4,
            /// <summary>
            /// Enum MAINTENANCE for value: MAINTENANCE
            /// </summary>
            [EnumMember(Value = "MAINTENANCE")]
            MAINTENANCE = 5        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Asset" /> class.
        /// </summary>
        /// <param name="ticker">ticker.</param>
        /// <param name="supported">supported.</param>
        /// <param name="useInStrategy">useInStrategy.</param>
        /// <param name="tradable">tradable.</param>
        /// <param name="status">status.</param>
        public Asset(string ticker = default(string), bool? supported = default(bool?), bool? useInStrategy = default(bool?), bool? tradable = default(bool?), StatusEnum? status = default(StatusEnum?))
        {
            this.Ticker = ticker;
            this.Supported = supported;
            this.UseInStrategy = useInStrategy;
            this.Tradable = tradable;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets Ticker
        /// </summary>
        [DataMember(Name="ticker", EmitDefaultValue=true)]
        public string Ticker { get; set; }

        /// <summary>
        /// Gets or Sets Supported
        /// </summary>
        [DataMember(Name="supported", EmitDefaultValue=true)]
        public bool? Supported { get; set; }

        /// <summary>
        /// Gets or Sets UseInStrategy
        /// </summary>
        [DataMember(Name="useInStrategy", EmitDefaultValue=true)]
        public bool? UseInStrategy { get; set; }

        /// <summary>
        /// Gets or Sets Tradable
        /// </summary>
        [DataMember(Name="tradable", EmitDefaultValue=true)]
        public bool? Tradable { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Asset {\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Supported: ").Append(Supported).Append("\n");
            sb.Append("  UseInStrategy: ").Append(UseInStrategy).Append("\n");
            sb.Append("  Tradable: ").Append(Tradable).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Asset);
        }

        /// <summary>
        /// Returns true if Asset instances are equal
        /// </summary>
        /// <param name="input">Instance of Asset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Asset input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Supported == input.Supported ||
                    (this.Supported != null &&
                    this.Supported.Equals(input.Supported))
                ) && 
                (
                    this.UseInStrategy == input.UseInStrategy ||
                    (this.UseInStrategy != null &&
                    this.UseInStrategy.Equals(input.UseInStrategy))
                ) && 
                (
                    this.Tradable == input.Tradable ||
                    (this.Tradable != null &&
                    this.Tradable.Equals(input.Tradable))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.Supported != null)
                    hashCode = hashCode * 59 + this.Supported.GetHashCode();
                if (this.UseInStrategy != null)
                    hashCode = hashCode * 59 + this.UseInStrategy.GetHashCode();
                if (this.Tradable != null)
                    hashCode = hashCode * 59 + this.Tradable.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }
    }
}

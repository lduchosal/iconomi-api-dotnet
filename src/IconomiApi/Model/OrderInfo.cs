/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IconomiApi.Client.SwaggerDateConverter;

namespace IconomiApi.Model
{
    /// <summary>
    /// OrderInfo
    /// </summary>
    [DataContract]
        public partial class OrderInfo :  IEquatable<OrderInfo>
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Created for value: created
            /// </summary>
            [EnumMember(Value = "created")]
            Created = 1,
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 2,
            /// <summary>
            /// Enum Done for value: done
            /// </summary>
            [EnumMember(Value = "done")]
            Done = 3,
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 4,
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 5        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderInfo" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="percentageCompleted">percentageCompleted.</param>
        /// <param name="sourceTicker">sourceTicker (required).</param>
        /// <param name="targetTicker">targetTicker (required).</param>
        /// <param name="amount">amount.</param>
        public OrderInfo(StatusEnum? status = default(StatusEnum?), string orderId = default(string), decimal? percentageCompleted = default(decimal?), string sourceTicker = default(string), string targetTicker = default(string), decimal? amount = default(decimal?))
        {
            // to ensure "sourceTicker" is required (not null)
            if (sourceTicker == null)
            {
                throw new InvalidDataException("sourceTicker is a required property for OrderInfo and cannot be null");
            }
            else
            {
                this.SourceTicker = sourceTicker;
            }
            // to ensure "targetTicker" is required (not null)
            if (targetTicker == null)
            {
                throw new InvalidDataException("targetTicker is a required property for OrderInfo and cannot be null");
            }
            else
            {
                this.TargetTicker = targetTicker;
            }
            this.Status = status;
            this.OrderId = orderId;
            this.PercentageCompleted = percentageCompleted;
            this.Amount = amount;
        }
        

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets PercentageCompleted
        /// </summary>
        [DataMember(Name="percentageCompleted", EmitDefaultValue=true)]
        public decimal? PercentageCompleted { get; set; }

        /// <summary>
        /// Gets or Sets SourceTicker
        /// </summary>
        [DataMember(Name="source_ticker", EmitDefaultValue=true)]
        public string SourceTicker { get; set; }

        /// <summary>
        /// Gets or Sets TargetTicker
        /// </summary>
        [DataMember(Name="target_ticker", EmitDefaultValue=true)]
        public string TargetTicker { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderInfo {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PercentageCompleted: ").Append(PercentageCompleted).Append("\n");
            sb.Append("  SourceTicker: ").Append(SourceTicker).Append("\n");
            sb.Append("  TargetTicker: ").Append(TargetTicker).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderInfo);
        }

        /// <summary>
        /// Returns true if OrderInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PercentageCompleted == input.PercentageCompleted ||
                    (this.PercentageCompleted != null &&
                    this.PercentageCompleted.Equals(input.PercentageCompleted))
                ) && 
                (
                    this.SourceTicker == input.SourceTicker ||
                    (this.SourceTicker != null &&
                    this.SourceTicker.Equals(input.SourceTicker))
                ) && 
                (
                    this.TargetTicker == input.TargetTicker ||
                    (this.TargetTicker != null &&
                    this.TargetTicker.Equals(input.TargetTicker))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.PercentageCompleted != null)
                    hashCode = hashCode * 59 + this.PercentageCompleted.GetHashCode();
                if (this.SourceTicker != null)
                    hashCode = hashCode * 59 + this.SourceTicker.GetHashCode();
                if (this.TargetTicker != null)
                    hashCode = hashCode * 59 + this.TargetTicker.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }
    }
}

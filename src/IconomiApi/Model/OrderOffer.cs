/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IconomiApi.Client.SwaggerDateConverter;

namespace IconomiApi.Model
{
    /// <summary>
    /// OrderOffer
    /// </summary>
    [DataContract]
        public partial class OrderOffer :  IEquatable<OrderOffer>
    {
        /// <summary>
        /// Defines Side
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SideEnum
        {
            /// <summary>
            /// Enum Source for value: source
            /// </summary>
            [EnumMember(Value = "source")]
            Source = 1,
            /// <summary>
            /// Enum Target for value: target
            /// </summary>
            [EnumMember(Value = "target")]
            Target = 2        }
        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="side", EmitDefaultValue=true)]
        public SideEnum Side { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderOffer" /> class.
        /// </summary>
        /// <param name="sourceTicker">sourceTicker (required).</param>
        /// <param name="targetTicker">targetTicker (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="side">side (required).</param>
        public OrderOffer(string sourceTicker = default(string), string targetTicker = default(string), decimal? amount = default(decimal?), SideEnum side = default(SideEnum))
        {
            // to ensure "sourceTicker" is required (not null)
            if (sourceTicker == null)
            {
                throw new InvalidDataException("sourceTicker is a required property for OrderOffer and cannot be null");
            }
            else
            {
                this.SourceTicker = sourceTicker;
            }
            // to ensure "targetTicker" is required (not null)
            if (targetTicker == null)
            {
                throw new InvalidDataException("targetTicker is a required property for OrderOffer and cannot be null");
            }
            else
            {
                this.TargetTicker = targetTicker;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for OrderOffer and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "side" is required (not null)
            if (side == null)
            {
                throw new InvalidDataException("side is a required property for OrderOffer and cannot be null");
            }
            else
            {
                this.Side = side;
            }
        }
        
        /// <summary>
        /// Gets or Sets SourceTicker
        /// </summary>
        [DataMember(Name="source_ticker", EmitDefaultValue=true)]
        public string SourceTicker { get; set; }

        /// <summary>
        /// Gets or Sets TargetTicker
        /// </summary>
        [DataMember(Name="target_ticker", EmitDefaultValue=true)]
        public string TargetTicker { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public decimal? Amount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderOffer {\n");
            sb.Append("  SourceTicker: ").Append(SourceTicker).Append("\n");
            sb.Append("  TargetTicker: ").Append(TargetTicker).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderOffer);
        }

        /// <summary>
        /// Returns true if OrderOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceTicker == input.SourceTicker ||
                    (this.SourceTicker != null &&
                    this.SourceTicker.Equals(input.SourceTicker))
                ) && 
                (
                    this.TargetTicker == input.TargetTicker ||
                    (this.TargetTicker != null &&
                    this.TargetTicker.Equals(input.TargetTicker))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceTicker != null)
                    hashCode = hashCode * 59 + this.SourceTicker.GetHashCode();
                if (this.TargetTicker != null)
                    hashCode = hashCode * 59 + this.TargetTicker.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                return hashCode;
            }
        }
    }
}

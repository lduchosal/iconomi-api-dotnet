/* 
 * Iconomi API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IconomiApi.Client.SwaggerDateConverter;

namespace IconomiApi.Model
{
    /// <summary>
    /// StructureSubmit
    /// </summary>
    [DataContract]
        public partial class StructureSubmit :  IEquatable<StructureSubmit>
    {
        /// <summary>
        /// Defines SpeedType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SpeedTypeEnum
        {
            /// <summary>
            /// Enum SLOW for value: SLOW
            /// </summary>
            [EnumMember(Value = "SLOW")]
            SLOW = 1,
            /// <summary>
            /// Enum MEDIUM for value: MEDIUM
            /// </summary>
            [EnumMember(Value = "MEDIUM")]
            MEDIUM = 2,
            /// <summary>
            /// Enum FAST for value: FAST
            /// </summary>
            [EnumMember(Value = "FAST")]
            FAST = 3        }
        /// <summary>
        /// Gets or Sets SpeedType
        /// </summary>
        [DataMember(Name="speedType", EmitDefaultValue=true)]
        public SpeedTypeEnum? SpeedType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructureSubmit" /> class.
        /// </summary>
        /// <param name="ticker">ticker.</param>
        /// <param name="values">values.</param>
        /// <param name="speedType">speedType.</param>
        public StructureSubmit(string ticker = default(string), List<SubmitStructureElement> values = default(List<SubmitStructureElement>), SpeedTypeEnum? speedType = default(SpeedTypeEnum?))
        {
            this.Ticker = ticker;
            this.Values = values;
            this.SpeedType = speedType;
        }
        
        /// <summary>
        /// Gets or Sets Ticker
        /// </summary>
        [DataMember(Name="ticker", EmitDefaultValue=true)]
        public string Ticker { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values", EmitDefaultValue=true)]
        public List<SubmitStructureElement> Values { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructureSubmit {\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  SpeedType: ").Append(SpeedType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructureSubmit);
        }

        /// <summary>
        /// Returns true if StructureSubmit instances are equal
        /// </summary>
        /// <param name="input">Instance of StructureSubmit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructureSubmit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.SpeedType == input.SpeedType ||
                    (this.SpeedType != null &&
                    this.SpeedType.Equals(input.SpeedType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                if (this.SpeedType != null)
                    hashCode = hashCode * 59 + this.SpeedType.GetHashCode();
                return hashCode;
            }
        }
    }
}
